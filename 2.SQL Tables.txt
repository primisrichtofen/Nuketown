Code:
CREATE TABLE ProductDetails (
    ProductID INT PRIMARY KEY,
    ProductName VARCHAR(50),
    Category VARCHAR(50),
    Supplier VARCHAR(50)
);

CREATE TABLE CustomerDetails (
    CustomerID INT PRIMARY KEY,
    CustomerName VARCHAR(50),
    Region VARCHAR(50)
);

CREATE TABLE SalesDetails (
    OrderID INT PRIMARY KEY,
    ProductID INT,
    CustomerID INT,
    PurchaseDate DATE, 
    SalesAmount INT,   
    FOREIGN KEY (ProductID) REFERENCES ProductDetails(ProductID),
    FOREIGN KEY (CustomerID) REFERENCES CustomerDetails(CustomerID)
);

INSERT INTO ProductDetails (ProductID, ProductName, Category, Supplier)
VALUES
    (1, 'Laptop', 'Electronics', 'ABC Electronics'),
    (2, 'Smartphone', 'Electronics', 'XYZ Tech'),
    (3, 'Desk Chair', 'Furniture', 'Comfort Furnish'); 

INSERT INTO CustomerDetails (CustomerID, CustomerName, Region)
VALUES
    (201, 'John Doe', 'North'),
    (202, 'Jane Smith', 'South'),
    (203, 'Robert Johnson', 'East'); 

INSERT INTO SalesDetails (OrderID, ProductID, CustomerID, PurchaseDate, SalesAmount)
VALUES
    (101, 1, 201, '2023-01-15', 1200),
    (102, 2, 202, '2023-01-16', 800),
    (103, 1, 203, '2023-01-16', 1100),
    (104, 3, 201, '2023-01-17', 200);

SELECT p.Category, SUM(s.SalesAmount) AS TotalSales
FROM SalesDetails s
JOIN ProductDetails p ON s.ProductID = p.ProductID
JOIN CustomerDetails c ON s.CustomerID = c.CustomerID
WHERE c.Region = 'North'
GROUP BY p.Category;

Theory:
1. Dimension Table:
A table that stores descriptive attributes, often text values, that provide context to the data in the fact table. It contains descriptive information about the main subjects of your analysis.
2. Fact Table:
Stores quantitative data/facts about a business process, usually numeric values such as sales revenue, quantity sold, or profit. It contains data that represents the performance of a business process.
3. Relationship:
Dimension and fact tables are connected through keys. This allows for the blending of descriptive information with quantitative data seamlessly.

Algorithm:Algorithm:

1. The code creates three tables: ProductDetails, CustomerDetails, and SalesDetails.
2. The ProductDetails and CustomerDetails tables store descriptive information, while the SalesDetails table is the fact table, storing transactional data (sales amounts).
3. The SalesDetails table uses foreign keys to reference the ProductDetails and CustomerDetails tables.
4. The INSERT statements populate these tables with sample data.
5. A SELECT query is used to calculate the total sales amount for products in the North region, grouped by product category.

